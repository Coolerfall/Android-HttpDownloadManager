apply plugin: 'maven'

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
          : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
          : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
  return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
  return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate {
  uploadArchives {
    repositories {
      mavenDeployer {
        pom.groupId = POM_GROUP_ID
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME

        repository(url: getReleaseRepositoryUrl()) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }
        snapshotRepository(url: getSnapshotRepositoryUrl()) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }

        pom.project {
          name POM_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
        }
      }
    }
  }

  task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    title = POM_NAME
    exclude '**/internal/**'
    failOnError false
  }

  task androidJavadocsJar(type: Jar) {
    classifier = 'javadoc'
    baseName = POM_ARTIFACT_ID
    from androidJavadocs.destinationDir
  }

  artifacts {
    archives androidJavadocsJar
  }
}